name: Manual Test Run

on:
  workflow_dispatch:  # Manually triggered from the GitHub UI

jobs:
  test:
    runs-on: windows-latest  # Use a Windows runner
    
    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java (adjust the version if necessary)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'  # Specify your Java version here
          distribution: 'temurin'  # Specify the JDK distribution

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*', '**/settings.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Install dependencies (run Gradle build)
      - name: Install dependencies
        run: ./gradlew build -x test  # Skip tests during build to only install dependencies


      # Step 5: Install Gauge (Direct Installation from EXE)
      - name: Install Gauge
        run: |
        
          # Set a timeout for the download (e.g., 5 minutes)
          $downloadTimeout = 300  # 5 minutes in seconds
          try {
            Write-Output "Starting to download Gauge ZIP package..."
            # Download the Gauge ZIP package with a timeout
            Invoke-WebRequest -Uri https://github.com/getgauge/gauge/releases/download/v1.6.11/gauge-1.6.11-windows.x86_64.zip -OutFile gauge.zip -TimeoutSec $downloadTimeout
            Write-Output "Download completed successfully."
          } catch {
            Write-Error "Download failed: $_"
            exit 1
          }

          # Extract the ZIP package
          try {
            Write-Output "Extracting Gauge ZIP package..."
            Expand-Archive -Path 'gauge.zip' -DestinationPath 'C:\gauge' -Force
            Write-Output "Extraction completed successfully."
          } catch {
            Write-Error "Failed to extract ZIP package: $_"
            exit 1
          }

          # Add Gauge to PATH (assuming C:\gauge is the extracted directory)
          $env:PATH += ";C:\gauge"
          Write-Output "Gauge added to PATH."

          # Verify Gauge installation
          try {
            Write-Output "Verifying Gauge installation..."
            & "C:\gauge\gauge.exe" --version
          } catch {
            Write-Error "Failed to verify Gauge installation: $_"
            exit 1
          }

          # Clean up the downloaded ZIP file
          Remove-Item -Force gauge.zip

      - name: Install Gradle Gauge plugin
        run: |
        
          # Run the Gradle command to install the Gauge plugin
          Write-Output "Applying the Gradle Gauge plugin..."
          & "./gradlew" -q --no-daemon build

      # Step 6: Verify Gauge installation
      - name: Verify Gauge installation
        run: |
        
          try {
            Write-Output "Verifying Gauge installation..."
            & "C:\gauge\gauge.exe" --version
          } catch {
            Write-Error "Failed to verify Gauge installation: $_"
            exit 1
          }

      # Step 7: Run the tests in the Specs folder
      - name: Run Gauge tests
        run: |
        
          echo "Running command from the project directory"
          # Your terminal command here
          gradle clean build gauge -PspecsDir="specs"
        working-directory: ./aquatests

      # Step 8: Upload test reports as an artifact
      - name: Upload Test Report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/html-report  # Adjust to your report location if needed
