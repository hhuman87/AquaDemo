name: Manual Test Run

on:
  workflow_dispatch:  # Manually triggered from the GitHub UI

jobs:
  test:
    runs-on: windows-latest  # Use a Windows runner
    
    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java (adjust the version if necessary)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'  # Specify your Java version here
          distribution: 'temurin'  # Specify the JDK distribution

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*', '**/settings.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Install dependencies (run Gradle build)
      - name: Install dependencies
        run: ./gradlew build -x test  # Skip tests during build to only install dependencies


      # Step 5: Install Gauge (Direct Installation from EXE)
      - name: Install Gauge
        run: |
        
          # Set a timeout for the download (e.g., 5 minutes)
          $downloadTimeout = 300  # 5 minutes in seconds
          try {
             Write-Output "Starting to download Gauge installer..."
             # Download the Gauge installer with a timeout
             Invoke-WebRequest -Uri https://github.com/getgauge/gauge/releases/download/v1.6.11/gauge-1.6.11-windows.x86_64.exe -OutFile gauge-installer.exe -TimeoutSec $downloadTimeout
             Write-Output "Download completed successfully."
          } catch {
            Write-Error "Download failed: $_"
            exit 1
          }
    
          # Run the installer with logging to capture more info (removed /quiet for debugging)
          try {
             Write-Output "Starting Gauge installer..."
             $process = Start-Process -FilePath 'gauge-installer.exe' -ArgumentList '/norestart', '/log', 'gauge-install.log' -NoNewWindow -PassThru

             # Wait for the installer to finish or timeout after 15 minutes
             $timeout = 900  # 15 minutes
             $elapsedTime = 0
             while ($process.HasExited -eq $false -and $elapsedTime -lt $timeout) {
                Start-Sleep -Seconds 5
                $elapsedTime += 5
                Write-Output "Waiting for Gauge installer to complete... ($elapsedTime seconds)"
             }

             # Check if the process finished or timed out
             if ($process.HasExited) {
             Write-Output "Installer process completed successfully."
             } else {
                 Write-Error "Installer process timed out after $timeout seconds."
                 # Optionally, kill the process if it times out
                 Stop-Process -Id $process.Id -Force
             }
          } catch {
             Write-Error "Installer failed: $_"
             exit 1
          }

          # Check if the installation log exists and output it
          if (Test-Path 'gauge-install.log') {
            Write-Output "Gauge installation log:"
            Get-Content 'gauge-install.log' | Write-Output
          } else {
            Write-Error "Installation log not found."
          }

          # Add a short delay to ensure the installer process is fully completed
          Write-Output "Waiting 5 seconds before cleanup."
          Start-Sleep -Seconds 5  # Wait 5 seconds before attempting cleanup
    
          # Check if the installer process is still running
          $installerProcess = Get-Process | Where-Object { $_.Path -like '*gauge-installer.exe*' }
          if ($installerProcess) {
            Write-Output "Installer process is still running, waiting for it to complete."
            # Wait for the process to exit before proceeding
            $installerProcess | Wait-Process
          }

          # Clean up the installer
          Write-Output "Attempting to remove the installer."
          try {
            Remove-Item -Force gauge-installer.exe
            Write-Output "Installer removed successfully."
          } catch {
            Write-Error "Failed to remove installer: $_"
          }

      # Step 6: Verify Gauge installation
      - name: Verify Gauge installation
        run: gauge --version  # Check if Gauge is installed successfully

      # Step 7: Run the tests in the Specs folder
      - name: Run Gauge tests
        run: gauge run Specs/  # Run tests from the Specs folder

      # Step 8: Upload test reports as an artifact
      - name: Upload Test Report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: build/reports/tests/test  # Adjust to your report location if needed
