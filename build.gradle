buildscript {
    dependencies {
        classpath "gradle.plugin.org.gauge.gradle:gauge-gradle-plugin:1.8.2"
    }
}

plugins {
    id 'java'
    id 'org.gauge' version '1.8.2'
}

group = 'aquatests'
version = '1.0'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations.configureEach {
    exclude group: "junit"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation('com.codeborne:selenide:7.6.0')
    testImplementation('org.slf4j:slf4j-simple:2.0.13')

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation 'io.github.bonigarcia:webdrivermanager:5.8.0'

    testImplementation 'io.rest-assured:rest-assured:5.5.0'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.24.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.24.2'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.24.2'

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.apache.pdfbox:pdfbox:3.0.3'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    testImplementation 'org.hamcrest:hamcrest:3.0'

    implementation 'org.apache.poi:poi:5.3.0'
    implementation 'org.apache.poi:poi-ooxml:5.3.0'

    implementation 'mysql:mysql-connector-java:8.0.32'

    implementation group: 'com.thoughtworks.gauge', name: 'gauge-java', version: '0.11.2'

    testRuntimeOnly 'com.codeborne:selenide:7.6.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

test {
    doFirst {
        println "Running tests for specs in: ${project.hasProperty('specsDir') ? project.specsDir : 'default directory'}"
    }
}

gauge {
    specsDir = 'specs'
    inParallel = false
    nodes = 1
    env = 'default'
    additionalFlags = '--verbose'
}
